// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs,
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
  IN
    x[16], y[16],  // 16-bit inputs
    zx, // zero the x input?
    nx, // negate the x input?
    zy, // zero the y input?
    ny, // negate the y input?
    f,  // compute out = x + y (if 1) or x & y (if 0)
    no; // negate the out output?

  OUT
    out[16], // 16-bit output
    zr, // 1 if (out == 0), 0 otherwise
    ng; // 1 if (out < 0),  0 otherwise

  PARTS:

    // handle input zeroing
    Mux16(a=x, b=false, sel=zx, out=xx);
    Mux16(a=y, b=false, sel=zy, out=yy);

    // handle input negation
    Not16(in=xx, out=notx);
    Mux16(a=xx, b=notx, sel=nx, out=xxx);
    Not16(in=yy, out=noty);
    Mux16(a=yy, b=noty, sel=ny, out=yyy);

    // do calc
    And16(a=xxx, b=yyy, out=and);
    Add16(a=xxx, b=yyy, out=add);
    Mux16(a=and, b=add, sel=f, out=muxout);

    // handle output negation
    Not16(in=muxout, out=notout);
    Mux16(a=muxout, b=notout, sel=no, out=out);

    // get an internal node of the output
    // also set ng bit
    Mux16(a=muxout, b=notout, sel=no, out[0..7]=outhalf1, out[8..15]=outhalf2, out[15]=ng);

    // set zr bit
    Or8Way(in=outhalf1, out=or1);
    Or8Way(in=outhalf2, out=or2);
    Or(a=or1, b=or2, out=orzr);
    Not(in=orzr, out=zr);
}